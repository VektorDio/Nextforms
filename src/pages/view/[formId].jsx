import React, {useState} from 'react';
import { v4 as uuidv4 } from 'uuid';
import Head from "next/head";
import Main from "@/components/pageWraper/main";
import ViewHeader from "@/components/viewElements/viewHeader";
import ViewColumn from "@/components/viewElements/viewColumn";
import ViewNameBlock from "@/components/viewElements/viewNameBlock";
import ViewBlock from "@/components/viewElements/viewBlock";
import {Formik} from "formik";
import * as Yup from "yup";
// import {useRouter} from "next/router";

const FormConstructor = () => {

    // const router = useRouter()
    // const {formId} = router.query

    const [formObject, setFormObject] = useState({
        id: uuidv4(),
        creator: "test",
        active: true,
        formName: "New form",
        formDescription: "Description",
        questions: [{
            id: uuidv4(),
            required: true,
            type: "oneLineText",
            question: "test1",
            options:[]
        },
            {
                required: true,
                type: "paragraphText",
                question: "test2",
                options:[]
            },
            {
                required: true,
                type: "radio",
                question: "test3",
                options:[{
                    id: uuidv4(),
                    text: "444"
                },{
                    id: uuidv4(),
                    text: "4441"
                },{
                    id: uuidv4(),
                    text: "4442"
                },{
                    id: uuidv4(),
                    text: "4443"
                }]
            },
            {
                required: true,
                type: "checkbox",
                question: "test4",
                options:[{
                    id: uuidv4(),
                    text: "444"
                },{
                    id: uuidv4(),
                    text: "4441"
                },{
                    id: uuidv4(),
                    text: "4442"
                },{
                    id: uuidv4(),
                    text: "4443"
                }]
            },
            {
                required: true,
                type: "select",
                question: "test5",
                options:[{
                    id: uuidv4(),
                    text: "444"
                },{
                    id: uuidv4(),
                    text: "4441"
                },{
                    id: uuidv4(),
                    text: "4442"
                },{
                    id: uuidv4(),
                    text: "4443"
                }]
            },
            {
                required: true,
                type: "date",
                question: "test6",
                options:[]
            },
            {
                required: true,
                type: "time",
                question: "test7",
                options:[]
            }]
    })

    const required = Yup.string().required("This is a required field")
    const requiredCheckbox = Yup.array().min(1,"Choose one")
    const text = Yup.string().max(300, "Too many characters")
    const date = Yup.date().max("2100-01-01", "Provide valid date").min("1900-01-01", "Provide valid date")

    //bryaw7xLxIp5KkgS

    const validationScheme = {}
    formObject.questions.map((question)=> {
        switch (question.type){
            case "date":
                validationScheme[question.question] = date
                break;
            case "oneLineText":
                validationScheme[question.question] = text
                break;
            case "paragraphText":
                validationScheme[question.question] = text
                break;
        }

        if (question.required){
            validationScheme[question.question] = required
            if (question.type === "checkbox"){
                validationScheme[question.question] = requiredCheckbox
            }
            if (question.type === "date"){
                validationScheme[question.question] = date
            }
        }
    })

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Formik
                initialValues={{
                    test: [],
                }}
                validationSchema={Yup.object().shape(validationScheme)}
                onSubmit={async (values) => {
                    alert(JSON.stringify(values, null, 2));
                }}
            >{() => (
                <>
                    <ViewHeader id={formObject.id}/>
                    <Main>
                        <ViewColumn>
                            <ViewNameBlock
                                formName={formObject.formName}
                                formDescription={formObject.formDescription}
                            />
                            {
                                formObject.questions.map((question , index) => (
                                    <ViewBlock
                                        key={index}
                                        question={question}
                                    />
                                ))
                            }
                        </ViewColumn>
                    </Main>
                </>
            )}
        </Formik>
        </>
    );
};

export default FormConstructor;


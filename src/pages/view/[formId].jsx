import React, {useEffect, useState} from 'react';
import { v4 as uuidv4 } from 'uuid';
import Head from "next/head";
import Main from "@/components/pageWraper/main";
import ViewHeader from "@/components/viewElements/viewHeader";
import ViewColumn from "@/components/viewElements/viewColumn";
import ViewNameBlock from "@/components/viewElements/viewNameBlock";
import ViewBlock from "@/components/viewElements/viewBlock";
import {Formik} from "formik";
import * as Yup from "yup";
import {useRouter} from "next/router";
import {useGetFormById} from "@/queries/forms";

const FormConstructor = () => {
    const router = useRouter()
    const {formId} = router.query

    const {error, data, isLoading} = useGetFormById({
        id: formId,
    })

    const [formObject, setFormObject] = useState()


    useEffect(() => {
        if(data) {
            setFormObject(data.form)
        }
    }, [data])

    if (isLoading) return (<div>Loading...</div>)
    if (error) return (<div>error</div>)

    function handleFormSubmit(values) {
        if (formObject.active){
            alert(JSON.stringify(values, null, 2));
        }
        console.log(formId)
    }

    const requiredField = Yup.string()
        .required("This is a required field")
    const checkboxRequired = Yup.array()
        .min(1,"Choose one")
    const text = Yup.string()
        .max(300, "Too many characters")
    const textRequired = Yup.string()
        .max(300, "Too many characters")
        .required("This is a required field")
    const date = Yup.date()
        .max("9999-01-01", "Provide valid date")
    const dateRequired = Yup.date()
        .max("9999-01-01", "Provide valid date")
        .required("This is a required field")

    const validationScheme = {}
    formObject?.questions.map((question)=> {
        let required = question.required
        switch (question.type){
            case "date":
                (required) ?
                    (validationScheme[question.question] = dateRequired) :
                    (validationScheme[question.question] = date)
                break;
            case "oneLineText":
            case "paragraphText":
                (required) ?
                    (validationScheme[question.question] = textRequired) :
                    (validationScheme[question.question] = text)
                break;
            case "checkbox":
                (required) && (validationScheme[question.question] = checkboxRequired)
                break;
            default:
                (required) && (validationScheme[question.question] = requiredField)
                break;
        }
    })

    let initialValues = {}
    formObject?.questions.map(e => {
         initialValues[e.question] = (e.type === "checkbox") ?  [] : ""
    })

    return ((formObject) &&
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Formik
                initialValues={initialValues}
                validationSchema={Yup.object().shape(validationScheme)}
                onSubmit={(values) => {
                    handleFormSubmit(values)
                }}
            >{() => (
                <>
                    <ViewHeader handleFormSubmit={handleFormSubmit}/>
                    <Main>
                        <ViewColumn>
                            <ViewNameBlock
                                formName={formObject.name}
                                formDescription={formObject.description}
                            />
                            {
                                formObject.questions.map((question , index) => (
                                    <ViewBlock
                                        key={index}
                                        question={question}
                                    />
                                ))
                            }
                        </ViewColumn>
                    </Main>
                </>
            )}
        </Formik>
        </>
    );
};

export default FormConstructor;

